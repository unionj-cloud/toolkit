// Code generated by MockGen. DO NOT EDIT.
// Source: ./dns_client_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	dns "github.com/miekg/dns"
)

// MockIDNSClient is a mock of IDNSClient interface.
type MockIDNSClient struct {
	ctrl     *gomock.Controller
	recorder *MockIDNSClientMockRecorder
}

// MockIDNSClientMockRecorder is the mock recorder for MockIDNSClient.
type MockIDNSClientMockRecorder struct {
	mock *MockIDNSClient
}

// NewMockIDNSClient creates a new mock instance.
func NewMockIDNSClient(ctrl *gomock.Controller) *MockIDNSClient {
	mock := &MockIDNSClient{ctrl: ctrl}
	mock.recorder = &MockIDNSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDNSClient) EXPECT() *MockIDNSClientMockRecorder {
	return m.recorder
}

// Exchange mocks base method.
func (m_2 *MockIDNSClient) Exchange(m *dns.Msg, address string) (*dns.Msg, time.Duration, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Exchange", m, address)
	ret0, _ := ret[0].(*dns.Msg)
	ret1, _ := ret[1].(time.Duration)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Exchange indicates an expected call of Exchange.
func (mr *MockIDNSClientMockRecorder) Exchange(m, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockIDNSClient)(nil).Exchange), m, address)
}
